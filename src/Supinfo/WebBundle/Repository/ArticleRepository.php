<?php

namespace Supinfo\WebBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    public function checkArticleFieldValues(\Supinfo\WebBundle\Entity\Article $article)
    {
        // Add missing fieldValues
        foreach ($article->getSubFamily()->getFields() as $field) {
            foreach ($article->getFieldValues() as $fieldValue) {
                if ($fieldValue->getSubFamilyField() == $field) {
                    break 2;
                }
            }

            $options = array(
                'subFamilyField' => $field,
                'article' => $article,
            );
            $newFieldValue = new \Supinfo\WebBundle\Entity\SubFamilyFieldValue($options);

            $article->getFieldValues()->add($newFieldValue);
        }

        // We have to remove the field values corresponding to the wrong subFamily.
        foreach ($article->getFieldValues() as $fieldValue) {
            if ($fieldValue->getSubFamilyField()->getSubFamily() != $article->getSubFamily()) {
                $article->getFieldValues()->removeElement($fieldValue);
                $this->getEntityManager()->remove($fieldValue);
            }
        }
    }

    public function selectByIdQB($id)
    {
        $qb = parent::selectByIdQB($id);

        $qb->addSelect(
            'sf'
        )->innerJoin(
            $qb->getRootAlias().'.subFamily',
            'sf'
        );

        $qb->addSelect(
            'sff'
        )->leftJoin(
            'sf.fields',
            'sff'
        );

        $qb->addSelect(
            'fv'
        )->leftJoin(
            $qb->getRootAlias().'.fieldValues',
            'fv'
        );

        return $qb;
    }

    public function searchQB($query)
    {
        $qb = parent::searchQB($query);

        $qb->setParameter('query_like', '%'.$query.'%');
        $qb->setParameter('query_id', preg_match('/^1[0-9]{4}$/', $query) ? substr($query, 1) : $query);

        return $qb;
    }

    public function getSearchExpr(QueryBuilder $qb)
    {
        $expr = parent::getSearchExpr($qb);

        $expr->add(
            $qb->expr()->like(
                $qb->getRootAlias().'.description',
                ':query_like'
            )
        );
        
        $expr->add(
            $qb->expr()->eq(
                $qb->getRootAlias().'.id',
                ':query_id'
            )
        );

        return $expr;
    }

}